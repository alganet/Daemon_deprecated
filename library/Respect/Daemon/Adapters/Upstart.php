<?php

namespace Respect\Daemon\Adapters;

use Respect\Daemon\Exceptions\DirectoryNotFoundException;
use UnexpectedValueException;
use DirectoryIterator;
use Respect\Daemon\Job;
use Respect\Daemon\Meta;
use Respect\Daemon\Trigger;
use Respect\Daemon\EventListener;
use Respect\Daemon\Executable;
use Respect\Daemon\DeamonInterface;
use Respect\Daemon\Script;

class Upstart implements DeamonInterface
{

    protected $dir;
    protected $dirHandle;

    public static function runsOnEnvironment()
    {
        $uname = php_uname();
        if (!stripos($uname, 'linux'))
            return false;
        return false !== stripos(system('initctl --vesion'), 'upstart');
    }

    public function __construct($dir='/etc/init')
    {
        try {
            $this->dir = rtrim(realpath($dir), DIRECTORY_SEPARATOR);
            $this->dirHandle = new DirectoryIterator($this->dir);
        } catch (UnexpectedValueException $e) {
            throw new DirectoryNotFoundException(
                $e->getMessage(), $e->getCode(), $e
            );
        }
    }

    public function all()
    {
        $scripts = array();
        foreach ($this->dirHandle as $jobFile) {
            if (!$jobFile->isFile())
                continue;
            $scripts[] = $jobFile->getBasename('.conf');
        }
        return $scripts;
    }

    public function save(Job $job, $overwrite=false)
    {
        file_put_contents(
            $this->dir . DIRECTORY_SEPARATOR . $job->getName(),
            $this->getDefinition($job)
        );
    }

    public function remove($jobName)
    {
        unlink($this->dir . DIRECTORY_SEPARATOR . $job->getName());
    }

    public function get($jobName)
    {
        
    }

    public function status($jobName)
    {
        return system("status $jobName");
    }

    public function start($jobName)
    {
        return system("start $jobName");
    }

    public function stop($jobName)
    {
        return system("stop $jobName");
    }

    public function getDefinition(Job $job)
    {
        $jobName = $job->getName();
        $meta = implode(PHP_EOL,
            array_map(function($m) {
                    return $m->getName() . ' ' . $m->getValue();
                }, $job->getMeta()));
        $triggers = implode(PHP_EOL,
            array_map(function($t) {
                    $action = $t->getAction();
                    if ($action instanceof Script) {
                        $actionText = "script\n" . $action->getBody() . "\nend script";
                    } elseif ($action instanceof Executable) {
                        $actionText = "exec " . $action->getPath();
                    } else {
                        $actionText = '';
                    }
                    $event = $t->getEvent();
                    $event = $event === 'main' ? '' : $event . ' ';
                    return $event . $actionText;
                }, $job->getTriggers()));
        $el = implode(PHP_EOL,
            array_map(function($e) {
                    return $e->getName() . ' ' . $e->getValue();
                }, $job->getEventListeners()));
        return "#$jobName - Auto-generated by Respect\Deamon\n$meta$triggers$el";
    }

}